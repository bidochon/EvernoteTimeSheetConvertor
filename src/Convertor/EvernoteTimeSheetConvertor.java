/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Convertor;

import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.Transferable;
import java.io.*;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;

/**
 *
 * @author j35
 */
public class EvernoteTimeSheetConvertor extends javax.swing.JFrame implements ClipboardOwner {

    /**
     * Creates new form EvernoteTimeSheetConvertor
     */
    public EvernoteTimeSheetConvertor() {
        initComponents();
    }

    /**
     * Empty implementation of the ClipboardOwner interface.
     */
    public void lostOwnership(Clipboard aClipboard, Transferable aContents) {
        //do nothing
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        evernoteTimeSheetTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabelMonday = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelTuesday = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelWednesday = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelThursday = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabelFriday = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabelSaturday = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabelSunday = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Evernote Time Sheet");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        evernoteTimeSheetTextArea.setColumns(20);
        evernoteTimeSheetTextArea.setRows(7);
        evernoteTimeSheetTextArea.setText("05: 8:40->5:30 - 1h\n04: 8:35->5:30 - 1.25h\n03: 8:30->4:30\n02: 8:40->4:00 - 0.75h\n01: 8:40->5:30 - 1.25h +0.5h\n");
        evernoteTimeSheetTextArea.setAutoscrolls(false);
        evernoteTimeSheetTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                evernoteTimeSheetTextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(evernoteTimeSheetTextArea);

        jButton1.setText("convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Monday:");

        jLabelMonday.setText("N/A");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Tuesday");

        jLabelTuesday.setText("N/A");

        jLabel6.setText("Wednesday");

        jLabelWednesday.setText("N/A");

        jLabel8.setText("Thursday");

        jLabelThursday.setText("N/A");

        jLabel10.setText("Friday");

        jLabelFriday.setText("N/A");

        jLabel12.setText("Saturday");

        jLabelSaturday.setText("N/A");

        jLabel14.setText("Sunday");

        jLabelSunday.setText("N/A");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setText("PALS");

        jLabel5.setText("(paste: CTRL+V)");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel3))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel5)
                                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 342, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton1)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel4)
                            .add(jLabel6)
                            .add(jLabel8)
                            .add(jLabel10)
                            .add(jLabel12)
                            .add(jLabel14))))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelMonday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelTuesday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelWednesday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelThursday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelFriday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelSaturday)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabelSunday))
                .add(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel2)
                                    .add(jLabelMonday))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel4)
                                    .add(jLabelTuesday))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel6)
                                    .add(jLabelWednesday))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel8)
                                    .add(jLabelThursday))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel10)
                                    .add(jLabelFriday))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel12)
                                    .add(jLabelSaturday)))
                            .add(layout.createSequentialGroup()
                                .add(87, 87, 87)
                                .add(jButton1)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelSunday)
                            .add(jLabel14)))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)
                        .add(11, 11, 11)))
                .add(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        //EvernoteTimeSheetConvertor newTimeSheet = new EvernoteTimeSheetConvertor();

        //display what is currently on the clipboard
        //System.out.println("Clipboard contains:" + newTimeSheet.getClipboardContents() );

        String evernoteTStext = evernoteTimeSheetTextArea.getText();

        String[] parts = evernoteTStext.split("\n");

        String regex1 = "(\\d{1,2}):(\\d{1,2})[:h](\\d{2})->(\\d{1,2})[:h](\\d{2})"
                + "(.*)";
        String regex2 = "[+-](\\d.?\\d?)h(.*)";
        String regex3 = "[+-](.*)h";

        Pattern pattern = Pattern.compile(regex1);
        Pattern pattern2 = Pattern.compile(regex2);
        Pattern pattern3 = Pattern.compile(regex3);

        Matcher matcher;
        Matcher matcher2;
        Matcher matcher3;

        int numberDay = parts.length;

        for (int i = numberDay - 1, j = 0; i >= 0; i--, j++) {

            int dayOfWeek = j;

            String tmpString = parts[i];
            System.out.println(tmpString);

            float workedTimeThatDay = 0;

            //remove all white spaces
            tmpString = tmpString.replaceAll("\\s", "");

            if (!tmpString.contains(":")) {
                continue;
            }

            //we need to isolate the second part here using RE
            matcher = pattern.matcher(tmpString);

            matcher.find();

//            int dayOfMonth = Integer.parseInt(matcher.group(1));
//            String dom = String.format("Day of month is: %d\n", dayOfMonth);

            int startHour = Integer.parseInt(matcher.group(2));
            int startMn = Integer.parseInt(matcher.group(3));
//            String sh = String.format("Start hour: %d:%02d\n", startHour, startMn);

            int endHour = Integer.parseInt(matcher.group(4));
            int endMn = Integer.parseInt(matcher.group(5));
//            String eh = String.format("End hour: %d:%02d\n", endHour, endMn);

            float timePresentThatDay = timePresent(startHour, startMn, endHour, endMn);
            workedTimeThatDay = timePresentThatDay;

//            System.out.println(workedTimeThatDay);

            String lastPart = matcher.group(6);
            if (!lastPart.isEmpty()) {

//                System.out.println(String.format("last part is %s", lastPart));
                matcher2 = pattern2.matcher(lastPart);
                matcher2.find();

//                String sl = String.format("first part of last part is %s\n", matcher2.group(1));
//                System.out.println(sl);

                if (lastPart.contains("+")) {
                    workedTimeThatDay += Float.parseFloat(matcher2.group(1));
                } else {
                    workedTimeThatDay -= Float.parseFloat(matcher2.group(1));
                }

//                System.out.println(String.format("Time worked so far: %f" , workedTimeThatDay));

                String lastLastPart = matcher2.group(2);
                if (!lastLastPart.isEmpty()) {

//                    String sf = String.format("last part of last part is %s\n", matcher2.group(2));
//                    System.out.println(sf);
                    matcher3 = pattern3.matcher(lastLastPart);
                    matcher3.find();

//                    String sll = String.format("final part is %s\n", matcher3.group(1));
//                    System.out.println(sll);

                    if (lastLastPart.contains("+")) {
                        workedTimeThatDay += Float.parseFloat(matcher3.group(1));
                    } else {
                        workedTimeThatDay -= Float.parseFloat(matcher3.group(1));
                    }

                }

            }

            String sWorkedTimeThatDay = String.format("%.2f", workedTimeThatDay);

            switch (dayOfWeek) {
                case 0:
                    jLabelMonday.setText(sWorkedTimeThatDay);
                    break;
                case 1:
                    jLabelTuesday.setText(sWorkedTimeThatDay);
                    break;
                case 2:
                    jLabelWednesday.setText(sWorkedTimeThatDay);
                    break;
                case 3:
                    jLabelThursday.setText(sWorkedTimeThatDay);
                    break;
                case 4:
                    jLabelFriday.setText(sWorkedTimeThatDay);
                    break;
                case 5:
                    jLabelSaturday.setText(sWorkedTimeThatDay);
                    break;
                case 6:
                    jLabelSunday.setText(sWorkedTimeThatDay);
                    break;
                default:
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void evernoteTimeSheetTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_evernoteTimeSheetTextAreaKeyTyped
        // TODO add your handling code here:
        
        if (evt.getKeyChar() == 'v' && evt.getModifiers() == 4) {
            
            EvernoteTimeSheetConvertor newTimeSheet = new EvernoteTimeSheetConvertor();

            evernoteTimeSheetTextArea.setText(newTimeSheet.getClipboardContents());
//
//            //display what is currently on the clipboard
//        System.out.println("Clipboard contains:" + newTimeSheet.getClipboardContents() );


         }

    }//GEN-LAST:event_evernoteTimeSheetTextAreaKeyTyped

    /**
     * Get the String residing on the clipboard.
     *
     * @return any text found on the Clipboard; if none found, return an empty
     * String.
     */
    public String getClipboardContents() {
        String result = "";
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //odd: the Object param of getContents is not currently used
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText =
                (contents != null)
                && contents.isDataFlavorSupported(DataFlavor.stringFlavor);
        if (hasTransferableText) {
            try {
                result = (String) contents.getTransferData(DataFlavor.stringFlavor);
            } catch (UnsupportedFlavorException ex) {
                //highly unlikely since we are using a standard DataFlavor
                System.out.println(ex);
                ex.printStackTrace();
            } catch (IOException ex) {
                System.out.println(ex);
                ex.printStackTrace();
            }
        }
        return result;
    }

    private float timePresent(int startHour, int startMinute, int endHour, int endMinute) {
        /* 
         * This function will take the starting hour, minute and ending hour and minute
         * and will return the time present at work in fraction of 100
         */
        float totalTimePresent;

        float startMinutePer100 = convertMinTo100(startMinute);
        float endMinutePer100 = convertMinTo100(endMinute);

        float startTime = startHour + startMinutePer100;

        float endTime = endHour + endMinutePer100;

        if (endTime < startTime) {
            endTime += (float) 12;
        }

        totalTimePresent = endTime - startTime;
        return totalTimePresent;

    }

    private float convertMinTo100(int minute) {
        /*
         * Will convert the minute such as 30mn to fraction of 100
         * 0.5 in this case
         */
        float fraction = (float) minute / (float) 60;
        return fraction;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvernoteTimeSheetConvertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvernoteTimeSheetConvertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvernoteTimeSheetConvertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvernoteTimeSheetConvertor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvernoteTimeSheetConvertor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea evernoteTimeSheetTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelFriday;
    private javax.swing.JLabel jLabelMonday;
    private javax.swing.JLabel jLabelSaturday;
    private javax.swing.JLabel jLabelSunday;
    private javax.swing.JLabel jLabelThursday;
    private javax.swing.JLabel jLabelTuesday;
    private javax.swing.JLabel jLabelWednesday;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
